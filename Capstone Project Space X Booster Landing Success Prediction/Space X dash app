# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output, State
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()
launchsitelist = ["ALL"]
launchsitelist = launchsitelist + [i for i in spacex_df["Launch Site"].unique()]

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                # dcc.Dropdown(id='site-dropdown',...)
                                html.Div([dcc.Dropdown(id='site-dropdown', 
                                    options=[{'label': i, 'value': i} for i in launchsitelist],
                                    value='ALL',
                                    placeholder="Select a Launch Site here")]),
                                html.Br(),

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                #dcc.RangeSlider(id='payload-slider',...)
                                dcc.RangeSlider(
                                        id='payload-slider',
                                        min=0,
                                        max=10000,
                                        step=1000,
                                        value=[min_payload, max_payload]
                                    ),
                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart'))
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
@app.callback( Output(component_id='success-pie-chart', component_property='figure'),
               Input(component_id='site-dropdown', component_property='value'))

def generate_chart(sdd):
    if sdd == "ALL":
        dfall = spacex_df[spacex_df['class']==1]
        df = dfall.groupby(['Launch Site'])['class'].count().reset_index(name="cnt")
        pie_fig = px.pie(df, values="cnt", names="Launch Site", title='% of Success by Launch Site')
    else:
        dfalls = spacex_df[spacex_df['Launch Site']==str(sdd)]
        dfalls=dfalls.replace(0,'Failure')
        dfalls=dfalls.replace(1,'Success')
        df = dfalls.groupby(['class'])['class'].count().reset_index(name="cnt")
        pie_fig = px.pie(df, values="cnt", names="class", title=sdd+' % of Success & Failure')

    return pie_fig

# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback( Output(component_id='success-payload-scatter-chart', component_property='figure'),
               [Input(component_id='site-dropdown', component_property='value'),
               Input(component_id='payload-slider', component_property='value')])

def update_figure(sdd,pls):
    low, high = pls
    mask = (spacex_df['Payload Mass (kg)'] > low) & (spacex_df['Payload Mass (kg)'] < high)

    if sdd == "ALL":
#        dfall = spacex_df[spacex_df['class']==1]
#        df = dfall.groupby(['Payload Mass (kg)'])['classPayload Mass (kg)'].sum().reset_index(name="cnt")
        scat_fig = px.scatter(
                spacex_df[mask], x="Payload Mass (kg)", y="class", 
                color="Booster Version Category", #size='Payload Mass (kg)', 
                hover_data=['Payload Mass (kg)'])
        scat_fig.update_layout(title='Payload Mass (Kg) vs Success', xaxis_title='Payload Mass (Kg)', yaxis_title='Class')
    else:
        dfalls = spacex_df[spacex_df['Launch Site']==str(sdd)]
        scat_fig = px.scatter(
                dfalls[mask], x="Payload Mass (kg)", y="class", 
                color="Booster Version Category", #size='Payload Mass (kg)', 
                hover_data=['Payload Mass (kg)'])
        scat_fig.update_layout(title='Payload Mass (Kg) vs Success', xaxis_title='Payload Mass (Kg)', yaxis_title='Class')

    return scat_fig

# Run the app
if __name__ == '__main__':
    app.run_server()
